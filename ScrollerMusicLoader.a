; Displays an optional scrolling message with music and demonstrates using the CIAIRQ loader.
;Also loads a bitmap picture and displays it!

TurboTapeHeaderStatus					= $04
TurboTapeFinishedLoadingFile			= $05
TapeLoaderStoringToLo					= $06
TapeLoaderStoringToHi					= $07
TapeLoaderExpectedLoadingBlocks			= $08

TurboTapeBlockLoadError					= $09

;Comment/Uncomment this depending whether or not a flashing 
;loading tape sprite icon should be visible and flashing.
;LoadingSpriteEnabled = 1 

;Setup the position of the flashing loading sprite 
SPRITEXPOS = $20
SPRITEXMSB = $00
SPRITEYPOS = $34

;Comment/Uncomment this if you want a block counter on screen 
;BlockCounterEnabled = 1

;If load error text display wanted otherwise, we just have a 
;red border to indicate the problem

;DisplayLoadErrorText = 1

;If cool text effect wanted (Otherwise the screen will be plain blank)
LoaderFX = 1

;If scrolling message required - uncomment the command below 
ScrollerWanted = 1


;Bitmap relocation data settings

sourcevid = $3f40	;Koalapaint video RAM memory 
sourcecol = $4328	;Koalapaint colour RAM memory 
sourcebg   = $4710	;Bitmap background colour setting
destvid = $8400		;Where to write the video RAM data to
destcol = $d800		;Where to store the colour RAM to

;Music pointers 

MusicInit = $e000	;Richard's music init
MusicPlay = $e003	;Richard's music play


; The screen offset for the tape counter
TapeLoadErrorLine = 16
TapeCounterOffset = (15*40)+18

JMPStartAddress = $080d	;Exomizer's decrunch address

!pseudopc $f000 {
.yposSplit = $e2	;Position of the raster where the scrolling message lies 

MainSecondLoaderStart
	; IRQs are already off here, but we duplicate the SEI just to make it obvious what we are doing.
	sei
	lda $02a6
	sta .System ;Pal/Ntsc music timing
	sta $d020
	sta $d021
	; Grab everything on the stack
	ldx #$ff
	txs

	; Init the processor port.
	; Technically this is already done by the CIA loader but we duplicate this here just make it obvious.
	ldx #ProcessorPortDDRDefault
	stx ZPProcessorPortDDR
	; Turns on cassette motor and removes ROMs
	lda #%101
	sta ZPProcessorPort

	; Clear the screen
	ldx #0

	;stx SIDVolumeFilter

	lda #' '
.cl1
	sta SCREENRAM,x
	sta SCREENRAM+$100,x
	sta SCREENRAM+$200,x
	sta SCREENRAM+$2e8,x
	sta $d800,x 
	sta $d900,x 
	sta $da00,x 
	sta $dae8,x
	dex
	bne .cl1
	
;Display the loading text 

	
	lda #$30
	sta $83ff
	lda #$00
	sta $d020
	
!ifdef LoaderFX {	
	ldx #0
PutLines
	lda #$64
	sta $04c8,x
	lda #1
	sta $d8c8,x
	lda #$0d
	sta $d8c8+40,x
	lda #$63
	sta $0518,x
	lda TextLine1,x
	clc
	adc #$80
	sta $04f0,x
	lda TextLine2,x
	sta $0540,x

	lda #$05
	sta $d8f0+40,x
	lda #$0f
	sta $d940,x
	
	inx
	cpx #40
	bne PutLines
}
	

	; Initialise the scroller text and tape counter white colour
	ldy #39
	lda #VIC2Colour_White
.l2
	sta COLOURRAM+(24*40),y
	dey
	bpl .l2
	sta COLOURRAM+TapeCounterOffset
	sta COLOURRAM+TapeCounterOffset+1
	sta COLOURRAM+TapeCounterOffset+2
	lda #$20
	sta $0400,x
	sta $0428,x
	sta $0450,x
	

	
	; Enable loading any data now
	jsr TapeLoaderInitialiseIRQ
	lda #0
	jsr TapeLoaderLoadNewFile
	cli


	; Set a solid or clear sprite as default
	ldy #0
	lda #0

.l3
	sta $200,y
	dey
	bpl .l3

!ifdef ScrollerWanted {
	lda #<message
	sta read+1
	lda #>message
	sta read+2
}

	; Initialise the sprite display and the screen display
	lda #0
	sta VIC2SpriteMulticolour
	sta VIC2SpritePriority
	sta VIC2SpriteDoubleWidth
	sta VIC2SpriteDoubleHeight
	sta VIC2ScreenColour
	lda #8	; Sprite data at $200-$23f
	sta SPRITEFRAME
	lda #SPRITEXPOS
	sta VIC2Sprite0X
	lda #SPRITEXMSB
	sta VIC2SpriteXMSB
	lda #SPRITEYPOS
	sta VIC2Sprite0Y
	lda .spriteColours
	sta VIC2Sprite0Colour
	; And switch on the sprite
	lda #0
	sta VIC2SpriteEnable
	; Setup some screen display values, just to make sure everything is OK
	lda #VIC2MemorySetupDefault
	sta VIC2MemorySetup
	; Set VIC bank 0
	lda #CIA2PortASerialBusVICBankDefault
	sta CIA2PortASerialBusVICBank
	lda #VIC2ScreenControlHDefault
	sta VIC2ScreenControlH
	lda #VIC2ScreenControlVDefault
	sta VIC2ScreenControlV
	lda #$00
	sta $d020
	
	lda #$1b	;restore screen
    sta $d011
	
.MainLoop
	; Some debugging that allows us to see spare mainline cycles between the IRQs by changing the screen colour
!if 0 {
	inc VIC2ScreenColour
	dec VIC2ScreenColour
	jmp .MainLoop
}

.s00
	lda VIC2Raster
	cmp #.yposSplit
	bcc .s00

	; Scrolling split
	lda .xpos
	sta VIC2ScreenControlH

!ifdef OpenBorders {
.notYet1
	lda VIC2Raster
	cmp #VIC2SpriteYBorderBottom-2
	bcc .notYet1

	; Step 1 of opening the bottom borders
	lda VIC2ScreenControlV
	eor #%1000
	sta VIC2ScreenControlV

	lda #%10000000
.notYet2
	bit VIC2ScreenControlV
	beq .notYet2

	; Step 2 of opening the bottom borders
	lda VIC2ScreenControlV
	eor #%1000
	sta VIC2ScreenControlV
}

	; There is some spare time here so use it for playing the music
	; If the music isn't yet loaded then don't play it :)
	lda .musicInited
	beq .s1
	; Play
	jsr PalNTSCMusicPlayer
	 
	
.s1


	; Now wait for the raster to move off the bottom of the screen
	; After the open border code or the music will be fine.
.s0
	lda VIC2Raster
	cmp #.yposSplit
	bcs .s0
!ifdef OpenBorders {
	lda #$18
} else {

OPENME 
	lda .bitmapLoaded
	cmp #$01
	beq SetMCOL
	lda #$00
	jmp skipME
SetMCOL	
	lda #$18
	
}
skipME
	sta VIC2ScreenControlH

	;Check whether or not the single byte at $83ff has been overlapped
	;since loading bitmaps are NOT professional when data overwrites
	;the screen RAM while loading. YUCK! 
	
	lda $83ff
	cmp #$30
	beq ScreenOk
	;Switch screen off if byte differs!
ScreenOff	
	lda #$7b
	sta $d011	
ScreenOk		
	; Now it is safe to execute routines that can take some time

	; Here is where this scroller routine will display some text while the music data loads, then plays and then the final application loads and runs.
	lda TurboTapeFinishedLoadingFile
	beq .SkipFileLoaded1

	; Check what was just loaded
	ldx FileNameByte

	; Prepare the IRQ loader to load the next file
	inc FileNameByte
	lda FileNameByte
	jsr TapeLoaderLoadNewFile

	; Check the filename
	cpx #0
	beq .SpriteLoaded ;Test --- Loading Sprite (If wanted)

	cpx #1
	beq .MusicSetOn1     ;--- Loaded music ---

	cpx #2

	beq .DrawBitmap1 ;--- Video RAM loaded ---
	
	cpx #3
	beq .Ready   ;--- Game has loaded ---
.SkipFileLoaded1
	jmp .SkipFileLoaded
.DrawBitmap1
    
	jmp .DrawBitmap
.SpriteLoaded
!ifdef LoadingSpriteEnabled {
	lda #$01
} else {
	lda #00
}
	sta $d015
	
	lda #$00
	sta $d010
	

	jmp .SkipFileLoaded
.MusicSetOn1
	
	jmp .MusicSetOn
.SkipFileLoadedX
    
	jmp .SkipFileLoaded
.Ready

	; Start the main code we just loaded
.startLoadedCode
	; Start the main code we just loaded
	lda #0
	sta SIDVolumeFilter
	; Turn off the screen before starting the compressed game. Alows faster unpacking and also
	; stops the screen from displaying the junk while the decompression is working.
	sta VIC2ScreenControlV
!ifdef JMPQuickStartAddress {
	; The scroller code initialises and recovers from most weird machine configs so we do not
	; need to add code to specifically recover the machine's config.
	jmp JMPQuickStartAddress
} else {
UnusedSpace = $0334
	; Other code, like old games written years ago, are unable to recover from some weird machine
	; configs specifically those that play around with keyboard buffers and IRQs. So we need to
	; add code to specifically recover the machine's config.
	; First move the code
	ldx #.restoreStateEnd - .restoreStateStart
.rs1
	lda .restoreStateStart-1,x
	sta UnusedSpace-1,x
	dex
	bne .rs1
	jmp UnusedSpace

.restoreStateStart
!pseudopc UnusedSpace {
	; Some extra setup to restore the machine to a good state
	sei
	ldx #$ff
	txs

	lda #ProcessorPortDefault
	sta ZPProcessorPort
	; Init string display stack
	lda #0
	sta $18

	; If the NMI from TapeLoaderCIA.a was used MACROAckAllIRQs_A will ACK the NMI and allow the restore key to work again.
	; If you want BASIC to ignore the restore key then comment out the MACROAckAllIRQs_A line below.
	+MACROAckAllIRQs_A

	jsr $fda3	; Init I/O
	jsr $fd15	; Restore the normal IRQ
	jsr $ff5b	; Screen on
	cli
	jsr $e453
	clc ;A little patch for the Exomizer decruncher if V3.0.0 was used!
!ifdef JMPStartAddress {
	; Either jump directly into the code just loaded... (If the file loaded is just a simple "SYS XXXXX" BASIC program it is usually OK to do this.) ...
	jmp JMPStartAddress
} else {
	; ... Or use the code below to start the real BASIC code
	jsr $a660 ; CLR
	jsr $a68e ; Reset TXTPTR
	jmp $a7ae ; RUN Command. This "RUN" is explicit because if someone does a normal "LOAD" command there won't be any pending "RUN" after the autoboot code finishes.
}
}
.restoreStateEnd
}
	
	
	
.InitMusic1 
	jmp .InitMusic	
.DrawBitmap

;Shift picture RAM data 
shiftRAM0
	ldx #$00
	
shiftRAM1
	lda $2000,x 
	
shiftRAM2
	sta $a000,x 
	inx 
	bne shiftRAM1
	inc shiftRAM1+2
	inc shiftRAM2+2
	lda shiftRAM1+2
	cmp #$40 
	beq STOP2
	jmp shiftRAM0
STOP2
	

   ldx #$00
makepic
	lda sourcevid,x
	sta destvid,x
	lda sourcevid+$100,x
	sta destvid+$100,x
	lda sourcevid+$200,x
	sta destvid+$200,x
	lda sourcevid+$2e8,x
	sta destvid+$2e8,x
	lda sourcecol,x
	sta destcol,x
	lda sourcecol+$100,x
	sta destcol+$100,x
	lda sourcecol+$200,x
	sta destcol+$200,x
	lda sourcecol+$2e8,x
	sta destcol+$2e8,x
	 
	inx 
	bne makepic
	lda #$3b
	sta $d011
	lda #$01
	sta $dd00
	lda #$18
	sta $d018 
	lda $4710
	sta $d021 
	lda #$18
	sta .xpos 
	lda #1
	sta .bitmapLoaded
	lda #0
	sta $d015
	
	jmp .SkipFileLoaded
.MusicSetOn
	jmp .InitMusic
	
.FinishedProg	
	;ProcessorPort
	; Init string display stack
	lda #$37
	sta $01
	lda #$19
	sta $16
	lda #0
	sta $18
	jsr $fda3	; Init I/O
	jsr $fd15	; Restore the normal IRQ
	
	lda #0
	sta $d020
	sta $d021
	jmp $080d

	; Some small functions to flag updates close to where they are branched from
.InitMusic
	lda #0
	jsr MusicInit
	lda #1
	sta .musicInited

.SkipFileLoaded
	

	; Use the low byte of the tape storage address to cycle the sprite colours
	lda TapeLoaderStoringToLo
	lsr
	lsr
	lsr
	tax
	lda .spriteColours,x
	sta $d027

	lda TurboTapeBlockLoadError
	beq .noLoadError
	
	lda .stopPressed
	bne .rrwnd
	
	lda #2		;Load error found. Turn border red
	sta $d020
	
!ifdef DisplayLoadErrorText {	
	+DisplayColourTextMiddle_AX .textLoadErrorPressStop , .textLoadErrorPressStopEnd , SCREENRAM + (TapeLoadErrorLine*40), VIC2Colour_LightRed
}
	jmp .overText
.rrwnd
!ifdef DisplayLoadErrorText {
	+DisplayColourTextMiddle_AX .textLoadErrorPressRewind , .textLoadErrorPressRewindEnd , SCREENRAM + (TapeLoadErrorLine*40) , VIC2Colour_LightRed
}
.overText

	; Test for stop being pressed
	lda ZPProcessorPort
	and #%10000
	beq .notStop

	lda #1
	sta .stopPressed

	; Enable the tape motor
	lda ZPProcessorPort
	and #%11011111
	sta ZPProcessorPort

	jmp .endLoadErrorCode

.notStop
	; Play or rewind or FFWD is pressed, was the stop key pressed?
	lda .stopPressed
	beq .endLoadErrorCode

	; If yes, get rid of the message
	lda #0
	sta TurboTapeBlockLoadError
	sta .stopPressed

.noLoadError
!ifdef DisplayLoadErrorText {
	ldx #40
	lda #' '
.cll1
	sta SCREENRAM-1 + (TapeLoadErrorLine*40),x
	dex
	bne .cll1
}
.endLoadErrorCode

	; Display the blocks left to load
	
!ifdef BlockCounterEnabled {
	lda TapeLoaderExpectedLoadingBlocks
	beq .noTapeCount
	jsr TapeLoaderGetBlocksLeftToLoad
	tay
	lda TableMod10,y
	clc
	adc #'0'
	sta SCREENRAM+TapeCounterOffset+2
	ldx TableDiv10,y
	lda TableMod10,x
	clc
	adc #'0'
	sta SCREENRAM+TapeCounterOffset+1
	lda TableDiv100,y
	clc
	adc #'0'
	sta SCREENRAM+TapeCounterOffset
	jmp .tapeCountEnd
.noTapeCount
	lda #' '
	sta SCREENRAM+TapeCounterOffset
	sta SCREENRAM+TapeCounterOffset+1
	sta SCREENRAM+TapeCounterOffset+2
.tapeCountEnd
}

;Scroll text test + call routine. If the bitmap 
;has loaded, skip scroll text code, and automatically
;make the screen multicolour

	lda .bitmapLoaded	;Have we loaded out bitmap?
	cmp #1				;Yes ... Disable skip the scroll routine
	bne .MainScroll		;No  ... Run the scroll routine
	lda #$18			;Force scroll byte to be static screen multicolour ON
	sta .xpos
	jmp .MainLoop
	
	;Generate the main smooth scroll text code 
	
.MainScroll	
!ifdef LoaderFX {
	jsr ColourWash	;Call smart colour wash effect
}

!ifdef ScrollerWanted {	
	lda .xpos 
	sec
	sbc #2	;Speed of scroll
	and #7
	sta .xpos 
	bcs endscroll
	ldx #$00
pull	
	lda $0799,x 
	sta $0798,x 
	lda #1
	sta $db98,x
	inx
	cpx #$27
	bne pull
read
	lda message 
	cmp #$00
	bne messok
	lda #<message
	sta read+1
	lda #>message
	sta read+2
	jmp read
messok
	sta $07bf
	inc read+1
	lda read+1
	bne endscroll 
	inc read+2
endscroll	
	jmp .MainLoop
} else {
	lda #$00
	sta .xpos
	jmp .MainLoop
}

;Program loader colourwash subroutine

!ifdef LoaderFX {
ColourWash
	jsr Wash	;Call  Wash colour RAM
	
	ldx .ColourPointer		;read pointers and tables
	lda .txtColourTable,x	;then store to central colour position
	sta $d8f0+20			;on the screen - WHERE THE TEXT INSIDE THE INVERTED BAR IS PLACED
	inx
	cpx #40					;40 chars max per cycle!
	beq ColourWashComplete
	inc .ColourPointer
	rts
							;Reset cycle
ColourWashComplete
	ldx #$00
	sta .ColourPointer
	rts
	
Wash	
	jsr Forward		;Wash colours forwards
	jsr Backward	;Wash colours backwards
	rts
	
	;Main colour washing forwards
Forward
	ldx #18
fwdwash
	lda $d8f0+20,x
	sta $d8f0+21,x
	dex
	bpl fwdwash
	rts
	
	;Main colour washing backwards
Backward
	ldx #0
bckwash
	lda $d8f1,x
	sta $d8f0,x
	inx
	cpx #20
	bne bckwash
	rts

}

;PALNTSC music timer player 

PalNTSCMusicPlayer
	lda .System ;Which system are we using PAL or NTSC? 
	cmp #1
	beq PAL
	inc .NtscTimer
	lda .NtscTimer 
	cmp #6
	beq ResetNtsc
PAL	jsr MusicPlay
	rts 
ResetNtsc
	lda #$00
	sta .NtscTimer
	rts
	
	
;Loader's static presentation text 
!ifdef LoaderFX {
TextLine1
	
	!scr "         > q u a d   c o r e <           "
TextLine2
	!scr "    now loading ........ please wait     "
	
}	
.System !byte 0
.NtscTimer !byte 0

;Pointer to indicate bitmap loaded	
.BitmapLoaded !byte 0 

;Pointer to check for load error (Which primarily stops the tape and forces a red screen)
.stopPressed !by 0
;Pointer to check if music has loaded and is initialized. This will prompt the main code 
;to play the music during loading
.musicInited !by 0
.bitmapLoaded !by 0
;Scroll smoothness control pointer
.xpos !by 7
.nextChar !by 0
;Colour flash pointer
FlashCol !by 0

!ifdef ScrollerWanted {
message !scr "   now loading - quad core - ... (c) 2018 the new dimension ...   "
		!scr "programming, graphics and music by richard bayliss ...   loading "
		!scr "bitmap by shine/delysid ...   tape loader source by martin piper "
		!scr "with additional code by richard bayliss ... "
        !byte 0	;<- Always add !byte 0 to restart the scroll text
}
		
;Second flash colour pointer 	
.ColourPointer !byte $02	

!ifdef LoaderFX {
;Colour effect table, over the inverted text bar (Max no. of chars = 40)
.txtColourTable
!byte $01,$01,$0d,$03,$0a,$04,$02,$0b
!byte $00,$0b,$02,$04,$0a,$03,$0d,$01
!byte $0d,$0d,$0d,$0d,$0d,$0d,$0d,$0d
!byte $0d,$0d,$0d,$0d,$0d,$0d,$0d,$0d
!byte $0d,$0d,$0d,$03,$0a,$04,$02,$0b
}


.textEnd

!ifdef DisplayLoadErrorText {
;If you want to display load error messages, uncomment!
.textLoadErrorPressStop
!scr "load error. press stop"
.textLoadErrorPressStopEnd
.textLoadErrorPressRewind
!scr "rewind the tape then press play"
.textLoadErrorPressRewindEnd
}


; Loading sprite colour table 
.spriteColours
!ifDef LoadingSpriteEnabled {
	!by VIC2Colour_Black,VIC2Colour_Blue,VIC2Colour_Brown,VIC2Colour_Red
	!by VIC2Colour_DarkGrey,VIC2Colour_Purple,VIC2Colour_Orange,VIC2Colour_Grey
	!by VIC2Colour_LightBlue,VIC2Colour_Green,VIC2Colour_LightRed,VIC2Colour_Cyan
	!by VIC2Colour_LightGrey,VIC2Colour_Yellow,VIC2Colour_LightGreen,VIC2Colour_White
	!by VIC2Colour_LightGreen,VIC2Colour_Yellow,VIC2Colour_LightGrey,VIC2Colour_Cyan
	!by VIC2Colour_LightRed,VIC2Colour_Green,VIC2Colour_LightBlue,VIC2Colour_Grey
	!by VIC2Colour_Orange,VIC2Colour_Purple,VIC2Colour_DarkGrey,VIC2Colour_Red
	!by VIC2Colour_Brown,VIC2Colour_Blue,VIC2Colour_Black,VIC2Colour_Black
}

; Lookup tables to convert the remaing blocks left to load value into hundreds, tens and units.
TableMod10 !for .t,256 {!by (.t-1) % 10}
TableDiv10 !for .t,256 {!by (.t-1) / 10}
TableDiv100 !for .t,256 {!by (.t-1) / 100}

!source "TapeLoaderCIAIRQ.a"

; Must be the last bit of memory since this table is not allocated. Why bother to load a table
; full of zeros? :)
BlocksLoadedTable = *
!if BlocksLoadedTable > $fe00 {
!error "This table must not start later than $fe00."
}

MainSecondLoaderEnd
}
